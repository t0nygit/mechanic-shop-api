swagger: '2.0'
info:
  title: "Mechanic Shop API"
  description: "API for managing a mechanic shop with customers, mechanics, service tickets, and appointments"
  version: "1.0.0"
host: "127.0.0.1:5000"
schemes:
  - "http"
consumes:
  - "application/json"
produces:
  - "application/json"

securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header  
  
paths:
  /customers/login:
    post:
      tags:
        - Customers
      summary: "Login endpoint (generates token)"
      description: "Validates customer credentials and returns an authentication token"
      parameters:
        - in: "body"
          name: "body"
          description: "Login credentials"
          required: true
          schema:
            $ref: "#/definitions/LoginCredentials"
      responses:
        200:
          description: "Login successful"
          schema:
            $ref: "#/definitions/LoginResponse"

  /customers:
    get:
      tags:
        - Customers
      summary: "Get all customers"
      description: "Retrieve a list of all customers"
      responses:
        200:
          description: "Successfully retrieved customers"
          schema:
            $ref: "#/definitions/AllCustomers"

    post:
      tags:
        - Customers
      summary: "Create new customer"
      description: "Register a new customer account"
      parameters:
        - in: "body"
          name: "body"
          description: "Customer information"
          required: true
          schema:
            $ref: "#/definitions/CreateCustomerPayload"
      responses:
        201:
          description: "Customer created successfully"
          schema:
            $ref: "#/definitions/CustomerResponse"

    put:
      tags:
        - Customers
      summary: "Update customer"
      description: "Update customer information. Requires authentication."
      security:
        - bearerAuth: []
      parameters:
        - in: "body"
          name: "body"
          description: "Updated customer information"
          required: true
          schema:
            $ref: "#/definitions/UpdateCustomerPayload"
      responses:
        200:
          description: "Customer updated successfully"
          schema:
            $ref: "#/definitions/CustomerResponse"        

    delete:
      tags:
        - Customers
      summary: "Delete customer"
      description: "Delete a customer account. Requires authentication."
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Customer deleted successfully"
          schema:
            $ref: "#/definitions/DeleteResponse"        
  /mechanics/:
    get:
      tags:
        - Mechanics
      summary: "Get all mechanics"
      description: "Retrieve a list of all mechanics"
      responses:
        200:
          description: "Successfully retrieved mechanics"
          schema:
            $ref: "#/definitions/AllMechanics"
    
    post:
      tags:
        - Mechanics
      summary: "Create new mechanic"
      description: "Add a new mechanic to the system"
      parameters:
        - in: "body"
          name: "body"
          description: "Mechanic information"
          required: true
          schema:
            $ref: "#/definitions/CreateMechanicPayload"
      responses:
        201:
          description: "Mechanic created successfully"
          schema:
            $ref: "#/definitions/MechanicResponse"

  /mechanics/{mechanic_id}:
    get:
      tags:
        - Mechanics
      summary: "Get mechanic by ID"
      description: "Retrieve a specific mechanic"
      parameters:
        - in: "path"
          name: "mechanic_id"
          type: "integer"
          required: true
          description: "ID of the mechanic"
      responses:
        200:
          description: "Successfully retrieved mechanic"
          schema:
            $ref: "#/definitions/MechanicResponse"
        404:
          description: "Mechanic not found"
    
    put:
      tags:
        - Mechanics
      summary: "Update mechanic"
      description: "Update mechanic information"
      parameters:
        - in: "path"
          name: "mechanic_id"
          type: "integer"
          required: true
          description: "ID of the mechanic"
        - in: "body"
          name: "body"
          description: "Updated mechanic information"
          required: true
          schema:
            $ref: "#/definitions/CreateMechanicPayload"
      responses:
        200:
          description: "Mechanic updated successfully"
          schema:
            $ref: "#/definitions/MechanicResponse"
        404:
          description: "Mechanic not found"
    
    delete:
      tags:
        - Mechanics
      summary: "Delete mechanic"
      description: "Remove a mechanic from the system"
      parameters:
        - in: "path"
          name: "mechanic_id"
          type: "integer"
          required: true
          description: "ID of the mechanic"
      responses:
        200:
          description: "Mechanic deleted successfully"
          schema:
            $ref: "#/definitions/DeleteResponse"
        404:
          description: "Mechanic not found"

  /mechanics/most-active:
    get:
      tags:
        - Mechanics
      summary: "Get most active mechanics"
      description: "Returns mechanics sorted by number of tickets worked (most to least)"
      responses:
        200:
          description: "Successfully retrieved active mechanics"
          schema:
            $ref: "#/definitions/MostActiveMechanics"

  /service_tickets/:
    get:
      tags:
        - Service Tickets
      summary: "Get all service tickets"
      description: "Retrieve a list of all service tickets"
      responses:
        200:
          description: "Successfully retrieved service tickets"
          schema:
            $ref: "#/definitions/AllServiceTickets"
    
    post:
      tags:
        - Service Tickets
      summary: "Create new service ticket"
      description: "Create a new service ticket for a customer"
      parameters:
        - in: "body"
          name: "body"
          description: "Service ticket information"
          required: true
          schema:
            $ref: "#/definitions/CreateServiceTicketPayload"
      responses:
        201:
          description: "Service ticket created successfully"
          schema:
            $ref: "#/definitions/ServiceTicketResponse"
        404:
          description: "Customer not found"

  /service_tickets/{ticket_id}/assign-mechanic/{mechanic_id}:
    put:
      tags:
        - Service Tickets
      summary: "Assign mechanic to ticket"
      description: "Assign a mechanic to a service ticket"
      parameters:
        - in: "path"
          name: "ticket_id"
          type: "integer"
          required: true
          description: "ID of the service ticket"
        - in: "path"
          name: "mechanic_id"
          type: "integer"
          required: true
          description: "ID of the mechanic to assign"
      responses:
        200:
          description: "Mechanic assigned successfully"
          schema:
            $ref: "#/definitions/MechanicAssignmentResponse"
        404:
          description: "Service ticket or mechanic not found"
        400:
          description: "Mechanic already assigned"

  /service_tickets/{ticket_id}/remove-mechanic/{mechanic_id}:
    put:
      tags:
        - Service Tickets
      summary: "Remove mechanic from ticket"
      description: "Remove a mechanic from a service ticket"
      parameters:
        - in: "path"
          name: "ticket_id"
          type: "integer"
          required: true
          description: "ID of the service ticket"
        - in: "path"
          name: "mechanic_id"
          type: "integer"
          required: true
          description: "ID of the mechanic to remove"
      responses:
        200:
          description: "Mechanic removed successfully"
          schema:
            $ref: "#/definitions/MechanicAssignmentResponse"
        404:
          description: "Service ticket or mechanic not found"
        400:
          description: "Mechanic is not assigned to this ticket"

  /service_tickets/{ticket_id}/edit:
    put:
      tags:
        - Service Tickets
      summary: "Edit ticket mechanics"
      description: "Add or remove multiple mechanics from a service ticket"
      parameters:
        - in: "path"
          name: "ticket_id"
          type: "integer"
          required: true
          description: "ID of the service ticket"
        - in: "body"
          name: "body"
          description: "Mechanic IDs to add or remove"
          required: true
          schema:
            $ref: "#/definitions/EditMechanicsPayload"
      responses:
        200:
          description: "Ticket mechanics updated successfully"
        404:
          description: "Service ticket not found"

  /service_tickets/{ticket_id}/add-part/{part_id}:
    post:
      tags:
        - Service Tickets
      summary: "Add part to ticket"
      description: "Add an inventory part to a service ticket"
      parameters:
        - in: "path"
          name: "ticket_id"
          type: "integer"
          required: true
          description: "ID of the service ticket"
        - in: "path"
          name: "part_id"
          type: "integer"
          required: true
          description: "ID of the inventory part"
      responses:
        200:
          description: "Part added successfully"
          schema:
            $ref: "#/definitions/PartAddedResponse"
        404:
          description: "Service ticket or part not found"
        400:
          description: "Part already added to this ticket"  

  /inventory/:
    get:
      tags:
        - Inventory
      summary: "Get all inventory items"
      description: "Retrieve a list of all inventory items"
      responses:
        200:
          description: "Successfully retrieved inventory"
          schema:
            $ref: "#/definitions/AllInventory"
    
    post:
      tags:
        - Inventory
      summary: "Create new inventory item"
      description: "Add a new part to inventory"
      parameters:
        - in: "body"
          name: "body"
          description: "Inventory item information"
          required: true
          schema:
            $ref: "#/definitions/CreateInventoryPayload"
      responses:
        201:
          description: "Inventory item created successfully"
          schema:
            $ref: "#/definitions/InventoryResponse"

  /inventory/{inventory_id}:
    get:
      tags:
        - Inventory
      summary: "Get inventory item by ID"
      description: "Retrieve a specific inventory item"
      parameters:
        - in: "path"
          name: "inventory_id"
          type: "integer"
          required: true
          description: "ID of the inventory item"
      responses:
        200:
          description: "Successfully retrieved inventory item"
          schema:
            $ref: "#/definitions/InventoryResponse"
        404:
          description: "Inventory item not found"
    
    put:
      tags:
        - Inventory
      summary: "Update inventory item"
      description: "Update inventory item information"
      parameters:
        - in: "path"
          name: "inventory_id"
          type: "integer"
          required: true
          description: "ID of the inventory item"
        - in: "body"
          name: "body"
          description: "Updated inventory information"
          required: true
          schema:
            $ref: "#/definitions/UpdateInventoryPayload"
      responses:
        200:
          description: "Inventory item updated successfully"
          schema:
            $ref: "#/definitions/InventoryResponse"
        404:
          description: "Inventory item not found"
    
    delete:
      tags:
        - Inventory
      summary: "Delete inventory item"
      description: "Remove an inventory item from the system"
      parameters:
        - in: "path"
          name: "inventory_id"
          type: "integer"
          required: true
          description: "ID of the inventory item"
      responses:
        200:
          description: "Inventory item deleted successfully"
          schema:
            $ref: "#/definitions/DeleteResponse"
        404:
          description: "Inventory item not found"                

definitions: 

  LoginCredentials:
    type: "object"
    properties:
      username:
        type: "string"
      password:
        type: "string"
    required:
      - username
      - password
    
  LoginResponse:
    type: "object"
    properties:
      token:
        type: "string"
      message:
        type: "string"
      status:
        type: "string"

  CreateCustomerPayload:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      username:
        type: "string"
      password:
        type: "string"
    required:
      - name
      - email
      - phone
      - username
      - password

  CustomerResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      username:
        type: "string"

  AllCustomers:
    type: "array"
    items:
      type: "object"
      properties:
        id:
          type: "integer"
        name:
          type: "string"
        email:
          type: "string"
        phone:
          type: "string"
        username:
          type: "string"      

  UpdateCustomerPayload:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"   

  DeleteResponse:
    type: "object"
    properties:
      message:
        type: "string"           

  CreateMechanicPayload:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      salary:
        type: "number"
        format: "float"
    required:
      - name
      - email
      - phone
      - salary

  MechanicResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      salary:
        type: "number"
        format: "float"

  AllMechanics:
    type: "array"
    items:
      type: "object"
      properties:
        id:
          type: "integer"
        name:
          type: "string"
        email:
          type: "string"
        phone:
          type: "string"
        salary:
          type: "number"
          format: "float"

  MostActiveMechanics:
    type: "array"
    items:
      type: "object"
      properties:
        id:
          type: "integer"
        name:
          type: "string"
        email:
          type: "string"
        tickets_worked:
          type: "integer"      

  CreateServiceTicketPayload:
    type: "object"
    properties:
      VIN:
        type: "string"
        maxLength: 17
      service_date:
        type: "string"
      service_desc:
        type: "string"
      customer_id:
        type: "integer"
    required:
      - VIN
      - service_date
      - service_desc
      - customer_id

  ServiceTicketResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      VIN:
        type: "string"
      service_date:
        type: "string"
      service_desc:
        type: "string"
      customer_id:
        type: "integer"

  AllServiceTickets:
    type: "array"
    items:
      type: "object"
      properties:
        id:
          type: "integer"
        VIN:
          type: "string"
        service_date:
          type: "string"
        service_desc:
          type: "string"
        customer_id:
          type: "integer"

  EditMechanicsPayload:
    type: "object"
    properties:
      remove_ids:
        type: "array"
        items:
          type: "integer"
      add_ids:
        type: "array"
        items:
          type: "integer"

  MechanicAssignmentResponse:
    type: "object"
    properties:
      message:
        type: "string"

  PartAddedResponse:
    type: "object"
    properties:
      message:
        type: "string"
      parts:
        type: "array"
        items:
          type: "object"
          properties:
            id:
              type: "integer"
            name:
              type: "string"
            price:
              type: "number"        

  CreateInventoryPayload:
    type: "object"
    properties:
      name:
        type: "string"
      price:
        type: "number"
        format: "float"
    required:
      - name
      - price

  InventoryResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      price:
        type: "number"
        format: "float"

  AllInventory:
    type: "array"
    items:
      type: "object"
      properties:
        id:
          type: "integer"
        name:
          type: "string"
        price:
          type: "number"
          format: "float"

  UpdateInventoryPayload:
    type: "object"
    properties:
      name:
        type: "string"
      price:
        type: "number"
        format: "float"            